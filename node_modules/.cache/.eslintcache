[{"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\index.js":"1","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\App.js":"2","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Room\\Room.js":"3","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\MakeGroup\\MakeGroup.js":"4","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Analysis\\Analysis.js":"5","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Home\\Home.js":"6","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\common\\nav.js":"7","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Room\\Goal.js":"8","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\TaskForm\\TaskForm.js":"9","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\TaskList\\TaskList.js":"10","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Cards\\Card.js":"11","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Task\\Task.js":"12"},{"size":437,"mtime":1675004483357,"results":"13","hashOfConfig":"14"},{"size":1160,"mtime":1686057574604,"results":"15","hashOfConfig":"14"},{"size":5998,"mtime":1685068054282,"results":"16","hashOfConfig":"14"},{"size":1715,"mtime":1686057562942,"results":"17","hashOfConfig":"14"},{"size":1677,"mtime":1679155894106,"results":"18","hashOfConfig":"14"},{"size":3634,"mtime":1685065196398,"results":"19","hashOfConfig":"14"},{"size":1030,"mtime":1679155873666,"results":"20","hashOfConfig":"14"},{"size":2465,"mtime":1685109119784,"results":"21","hashOfConfig":"14"},{"size":1327,"mtime":1675004483364,"results":"22","hashOfConfig":"14"},{"size":316,"mtime":1675004483365,"results":"23","hashOfConfig":"14"},{"size":4231,"mtime":1679155957909,"results":"24","hashOfConfig":"14"},{"size":641,"mtime":1675004483363,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"159kkop",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\index.js",[],[],"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\App.js",[],[],"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Room\\Room.js",["65","66"],[],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport Goal from \"./Goal\";\r\nimport './room.css';\r\nimport './Goal.css'\r\nimport Card from \"../Cards/Card\"\r\n\r\nconst Room = ({rooms, baseUrl}) => {\r\n  const {id} = useParams();\r\n  const [flag, setFlag] = useState(0);\r\n  //const [cards,setCards] = useState([]); \r\n  \r\n  const room = rooms.find(r => r.id === id);\r\n\r\n  const colorArray = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF']; \r\n\r\n  if (room) {\r\n    console.log(room.users.sort(sortUsernames))\r\n  }\r\n  \r\nfunction sortUsers(a, b) {\r\n  if (a[1] > b[1]) {\r\n    return -1;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction sortUsernames(a, b) {\r\n  if (a[0] > b[0]) {\r\n    return -1\r\n  } else {\r\n    return 1\r\n  }\r\n}\r\n\r\n  const focus = async (fId) => {\r\n    if(fId !== null || fId !== \"\") {\r\n      const char = document.getElementById(fId);\r\n      char.classList.add('focused');\r\n      const tr = document.getElementById(\"tr\" + fId);\r\n      tr.classList.add('focused');\r\n    }\r\n  }\r\n  const defocus = async (fId) => {\r\n    if(fId !== null || fId !== \"\") {\r\n      const char = document.getElementById(fId);\r\n      char.classList.remove('focused');\r\n      const tr = document.getElementById(\"tr\" + fId);\r\n      tr.classList.remove('focused');\r\n    }\r\n  }\r\n\r\n\r\n  let navigate = useNavigate();\r\n\r\n  return (\r\n    \r\n    (room === null) ? \r\n      <div>\r\n        <img className=\"mountainImg\" src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn.suwalls.com%2Fwallpapers%2Fnature%2Fsnow-on-mountain-peaks-36874-1920x1200.jpg&f=1&nofb=1&ipt=29b1193425bb1e2633b43c4af8a7e8c0c70d1a2cc8dc4e563a113cb3f0b06ef9&ipo=images\" alt=\"\" />\r\n        Room loading...</div> :\r\n\r\n    (localStorage.getItem(\"name\").length < 1 || room.users.findIndex((user) => user[0] === localStorage.getItem(\"name\")) < 0) ? \r\n        navigate(\"/\") :\r\n\r\n    \r\n    <div className=\"room\">\r\n      <img className=\"mountainImg\" src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn.suwalls.com%2Fwallpapers%2Fnature%2Fsnow-on-mountain-peaks-36874-1920x1200.jpg&f=1&nofb=1&ipt=29b1193425bb1e2633b43c4af8a7e8c0c70d1a2cc8dc4e563a113cb3f0b06ef9&ipo=images\" alt=\"\" />\r\n\r\n      <div id=\"feedback\" className=\"feedback hidden\">\r\n        <div>Task Completed!</div>\r\n      </div>\r\n      <p className='codeNotif'>Join Code: {id}</p>\r\n      <p>&nbsp;</p>\r\n    <p className=\"winNotif\">Points need to win: {room.goal}</p>\r\n      <p className='winners'>\r\n        {room.users.filter((u) => u[1] >= room.goal).length > 0 ? \"Winners:  \" : \"\"}\r\n        {room.users.filter((u) => u[1] >= room.goal).map((u) => u[0]).join(', ')}\r\n      </p>\r\n      <div className='leaderboard'>\r\n        <div className=\"mountain\">\r\n          <div className=\"mountainContainer\">\r\n            {\r\n              room.users.sort(sortUsers).map((u) => (\r\n                <div onMouseOver={() => focus(room.users.indexOf(u))} onMouseLeave={() => defocus(room.users.indexOf(u))} \r\n                id={room.users.indexOf(u)} className=\"char\" style={(u[0].charCodeAt() % 2) ? \r\n                  {top: (270 * (1 - u[1] / room.goal) < 0 ? 0 : 270 * (1 - u[1] / room.goal)) + 'px', \r\n                  left:270 * u[1] / room.goal > 270 ? 250 : 270 * u[1] / room.goal -20+'px', \r\n                  backgroundColor: colorArray[u[0].charCodeAt() % 50], opacity:0.85, animationDuration:1+'s'} \r\n                  : {top: (270 * (1 - u[1] / room.goal) < 0 ? 0 : 270 * (1 - u[1] / room.goal)) + 'px',\r\n                  left: 270 * u[1] / room.goal > 270 ? 250 : 520 - (270 * u[1] / room.goal)+'px', \r\n                  backgroundColor: colorArray[u[0].charCodeAt() % 50], opacity:0.85, animationDuration:1+'s'\r\n                }}>\r\n                  <div>\r\n                  {room.users.indexOf(u) + 1}\r\n                  </div>\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n          <img src=\"/images/favicon.svg\" alt=\"\" />\r\n        </div>\r\n        <table className=\"roomTable\">\r\n        <tr className=\"tableHeader\">\r\n          <th>#</th>\r\n          <th>Name</th>\r\n          <th>Points</th>\r\n        </tr>\r\n        {room.users.sort(sortUsers).map((user) => (\r\n          <tr id={\"tr\" + room.users.indexOf(user)} className={parseInt(user[1]) >= parseInt(room.goal) ? \"winner\" : \"\"} \r\n          style={{color: colorArray[user[0].charCodeAt() % 50]}}>\r\n            <td onMouseOver={() => focus(room.users.indexOf(user))} onMouseLeave={() => defocus(room.users.indexOf(user))}>{room.users.indexOf(user) + 1}</td>\r\n            <td onMouseOver={() => focus(room.users.indexOf(user))} onMouseLeave={() => defocus(room.users.indexOf(user))}>{user[0]}</td>\r\n            <td onMouseOver={() => focus(room.users.indexOf(user))} onMouseLeave={() => defocus(room.users.indexOf(user))}>{user[1]}</td>\r\n          </tr>\r\n        ))}\r\n      </table>\r\n    </div>\r\n    <ul className='cardList'>\r\n        {room.users.find((u) => u[0] === localStorage.getItem(\"name\"))[2].map((card) => (\r\n          <Card index={card} room={room} flag={flag} setFlag={setFlag}/>\r\n        ))}\r\n    </ul>\r\n    <ul className=\"taskList\">\r\n      {room.tasks.map((task) => (\r\n        task.achieved.indexOf(localStorage.getItem(\"name\")) === -1 ? \r\n        <Goal id={id} rooms={rooms} task={task} baseUrl={baseUrl}/> : \r\n        <p className=\"taskComplete\">Task achieved!</p>\r\n        ))}\r\n    </ul>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Room;","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\MakeGroup\\MakeGroup.js",[],[],"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Analysis\\Analysis.js",[],[],"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Home\\Home.js",["67"],[],"import React from 'react'\r\nimport './Home.css';\r\nimport {useEffect, useState} from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\nconst Home = ({rooms, baseUrl}) => {\r\n  const [name, setName] = useState(localStorage.getItem(\"name\") === null ? \"\" : localStorage.getItem(\"name\"));\r\n\r\n  const removeUser = async (paramId, user) => {\r\n    await fetch(`${baseUrl}/rooms/leave/${paramId}/${user}`, {\r\n      method: \"PATCH\",\r\n    }).catch((e) => console.log(e))\r\n\r\n    // frontend update (doesnt work)\r\n    // const newUsers = rooms.find(room => room.id === paramId).users.filter(u => u[0] !== user);\r\n    // var newRooms = rooms.map(r => {\r\n    //   if (r.id !== paramId) {\r\n    //     r.users = newUsers;\r\n    //   }\r\n    // })\r\n    // setRooms(newRooms);\r\n  }\r\n\r\n  const addUser = async (paramId, user) => {\r\n    await fetch(`${baseUrl}/rooms/join/${paramId}/${user}`, {\r\n      method: \"PATCH\",\r\n    }).catch((e) => console.log(e))\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n    <img className=\"mountainImg\" src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn.suwalls.com%2Fwallpapers%2Fnature%2Fsnow-on-mountain-peaks-36874-1920x1200.jpg&f=1&nofb=1&ipt=29b1193425bb1e2633b43c4af8a7e8c0c70d1a2cc8dc4e563a113cb3f0b06ef9&ipo=images\" alt=\"\" />\r\n    { name.length > 0 ? \r\n      <div className='homeContainer'>\r\n      <h4 className=\"greeting\">Hello, {name}</h4>\r\n      \r\n      <p style={{marginTop: \"20px\"}}></p>\r\n      <div className=\"joinText\">Join group:</div>\r\n      <div className='join' action=\"\">\r\n        <input id=\"codeBox\" type=\"text\" placeholder='Enter code...'/>\r\n        <button type=\"submit\" onClick={() => addUser(document.getElementById(\"codeBox\").value, localStorage.getItem(\"name\"))}>Join!</button>\r\n      </div>\r\n\r\n      <h4 className=\"yourText\">Your groups:</h4>\r\n      <ul className=\"roomList\">\r\n        {rooms.map((room) => (\r\n          room.users.findIndex((user) => user[0] === localStorage.getItem(\"name\")) >= 0 ?\r\n          <div className=\"roomItem\">\r\n            <div className=\"roomName\">{room.name}</div>\r\n            <div className=\"roomBottom\">\r\n              <div className=\"pie-chartone\" style={{\r\n                  background:\r\n                  `conic-gradient(#7F8C72 0%, #00F071 ${parseInt(room.users.find((u) => u[0] === localStorage.getItem(\"name\"))[1] / room.goal * 100)}%, #87648C 0%)`\r\n              }}>\r\n              {parseInt(room.users.find((u) => u[0] === localStorage.getItem(\"name\"))[1] / room.goal * 100)}%\r\n              </div>\r\n              <div className=\"numbers\">\r\n                <p>Your points: {room.users.find((user) => user[0] === localStorage.getItem(\"name\"))[1]}</p>\r\n                <Link className=\"buttonLike\" to={`/${room.id}`}>Go to group</Link>\r\n                <button \r\n                  onClick={() => {\r\n                    removeUser(room.id, localStorage.getItem(\"name\"));\r\n                    }\r\n                  }\r\n                >Leave group</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          : <></>\r\n            ))}\r\n      </ul>\r\n      {\r\n        (rooms.length === 0) ? <h4>Loading groups...</h4> : <></>\r\n      }\r\n      </div>\r\n  :  <>\r\n  <div className=\"welcome\">Welcome to Climbr!</div>\r\n  <form action=\"\">\r\n    <input type=\"text\" id=\"nameBox\" placeholder='Type your name!'/>\r\n    <button type=\"submit\" onClick={() => {\r\n      localStorage.setItem(\"name\", document.getElementById(\"nameBox\").value);\r\n      setName(localStorage.getItem(\"name\"));\r\n      document.getElementById(\"navName\").innerHTML = localStorage.getItem(\"name\");\r\n    }}>Log In</button>\r\n  </form>\r\n  </>\r\n  }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Home","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\common\\nav.js",[],[],"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Room\\Goal.js",["68"],[],"import React from 'react';\r\nimport axios from \"axios\";\r\nimport './Goal.css'\r\n\r\nconst clamp = (num, min, max) => Math.min(Math.max(num, min), max);\r\n\r\nconst Goal = ({id, rooms, task, baseUrl}) => { \r\n\r\n  const room = rooms.find(r => r.id === id);\r\n\r\n  const completeTask = async () => {\r\n    let card\r\n    let random = clamp(Math.random() + (task.value / room.goal * 5), 0, 1)\r\n    console.log(random)\r\n    if (random > .94) {\r\n      card = 5\r\n    } else if (random > .78) {\r\n      card = Math.floor(2*Math.random() + 3)\r\n    } else if (random > .4) {\r\n      card = Math.floor(Math.random()*3)\r\n    } else {\r\n      card = -1\r\n    }\r\n\r\n    const user = localStorage.getItem(\"name\");\r\n    await fetch(`${baseUrl}/rooms/${id}/${user}/${task}/${card}`, {\r\n      method: \"PATCH\",\r\n    }).catch((e) => console.log(e))\r\n\r\n\r\n      // axios.put(`http://localhost:3500/rooms/${id}`, {\r\n      //   id: room.id,\r\n      //   name: room.name,\r\n      //   password: room.password,\r\n      //   users: room.users.map((user) => (\r\n      \r\n      //     user[0] === localStorage.getItem(\"name\") ? \r\n      //       card === -1 ? \r\n      //       [user[0], user[1] + task.value*1.2, user[2]] :\r\n      //       [user[0], user[1] + task.value, user[2].concat([card])]\r\n      //     : user\r\n      //   )),\r\n      //   goal: room.goal,\r\n      //   tasks: room.tasks.map((t) => (\r\n      //     task.title === t.title && task.redo === false ? {\r\n      //       title: t.title,\r\n      //       description: t.description,\r\n      //       value: t.value,\r\n      //       achieved: t.achieved.concat([localStorage.getItem(\"name\")]),\r\n      //       redo: t.redo\r\n      //     } : {\r\n      //       title: t.title,\r\n      //       description: t.description,\r\n      //       value: t.value,\r\n      //       achieved: t.achieved,\r\n      //       redo: t.redo\r\n      //     }\r\n      //   ))\r\n      // })\r\n      // .then((res) => {\r\n      //   setFlag(flag + 1);\r\n      // })\r\n\r\n\r\n      const feedback = document.getElementById('feedback');\r\n      const delay = ms => new Promise(res => setTimeout(res, ms));\r\n      feedback.classList.remove('hidden');\r\n      await delay(1500);\r\n      feedback.classList.add('hidden');\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"goalContainer\">\r\n      <div className=\"goalName\">{task.title}</div>\r\n      <p>Points: {task.value}</p>\r\n      <p>{task.description}</p>\r\n      <button onClick={() => completeTask()}>Done</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Goal;","C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\TaskForm\\TaskForm.js",[],[],"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\TaskList\\TaskList.js",[],[],"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Cards\\Card.js",[],[],"C:\\Users\\maxim\\OneDrive\\Documents\\GitHub\\SwampHacks2023\\src\\new\\Task\\Task.js",[],[],{"ruleId":"69","severity":1,"message":"70","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":13},{"ruleId":"69","severity":1,"message":"73","line":4,"column":10,"nodeType":"71","messageId":"72","endLine":4,"endColumn":19},{"ruleId":"69","severity":1,"message":"73","line":3,"column":9,"nodeType":"71","messageId":"72","endLine":3,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":13},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used."]